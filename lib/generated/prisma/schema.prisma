generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                       String    @id
  scope                    String?
  password                 String?
  access_token             String?
  access_token_expires_at  DateTime?
  account_id               String
  created_at               DateTime  @default(now())
  id_token                 String?
  provider_id              String
  refresh_token            String?
  refresh_token_expires_at DateTime?
  updated_at               DateTime
  user_id                  String
  user                     user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model category {
  id    String @id
  name  String @unique
  order Int    @default(10)
  slug  String @unique
  post  post[] @relation("PostCategories")
}

model comment {
  id            String    @id
  content       String
  order         Int       @default(10)
  created_at    DateTime  @default(now())
  updated_at    DateTime
  post_id       String
  author_id     String
  parent_id     String?
  user          user      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  comment       comment?  @relation("commentTocomment", fields: [parent_id], references: [id], onDelete: Cascade)
  other_comment comment[] @relation("commentTocomment")
  post          post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  image         image[]
}

model image {
  id         String   @id
  url        String
  order      Int      @default(10)
  alt        String?
  created_at DateTime @default(now())
  post_id    String?
  user_id    String?
  comment_id String?
  comment    comment? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  post       post?    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model post {
  id         String     @id
  slug       String     @unique
  title      String
  order      Int        @default(10)
  excerpt    String?
  content    String
  published  Boolean    @default(false)
  created_at DateTime   @default(now())
  updated_at DateTime
  author_id  String
  comment    comment[]
  image      image[]
  user       user       @relation(fields: [author_id], references: [id], onDelete: Cascade)
  category   category[] @relation("PostCategories")
  tag        tag[]      @relation("PostTags")
}

model profile {
  id         String  @id
  first_name String
  bio        String?
  user_id    String  @unique
  user       user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model session {
  id         String   @id
  token      String   @unique
  created_at DateTime @default(now())
  expires_at DateTime
  ip_address String?
  updated_at DateTime
  user_agent String?
  user_id    String
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model tag {
  id    String @id
  name  String @unique
  order Int    @default(10)
  slug  String @unique
  post  post[] @relation("PostTags")
}

model user {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  role          String?   @default("USER")
  created_at    DateTime  @default(now())
  updated_at    DateTime
  account       account[]
  comment       comment[]
  images        image[]
  post          post[]
  profile       profile?
  session       session[]
}

model verification {
  id         String    @id
  identifier String
  value      String
  created_at DateTime? @default(now())
  expires_at DateTime
  updated_at DateTime?
}
